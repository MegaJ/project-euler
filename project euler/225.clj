;; Note, this took a few minutes to run on my laptop.
;; Goal: find the 124th odd non_divisor of the tribonacci sequence
;; with initial values 1,1,1

(defn trib_cycle_mod_m [m]
  (loop [n1 3
         n2 5
         n3 9
         tribs [1 1 1]]
    (if (not= n1 n2 n3)
      (recur n2
             n3
             (mod (+' n1 n2 n3) m)
             (conj tribs (mod (+' n1 n2 n3) m)))
      tribs)))

(mod 1 27)

(trib_cycle_mod_m 27)
(some #(= 0 %) (trib_cycle_mod_m 26))


;; find tribonacci non-divisors
(loop [non_divisors []
       m 27]
  (if (not= 124 (count non_divisors))
    (if (some #(= 0 %) (trib_cycle_mod_m m))
      (recur non_divisors
             (+' m 2))
      (recur (conj non_divisors m)
             (+' m 2)))
    non_divisors))

;=> gives you a big array, take the last one.

;;; MISC ;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (count [27 81 91 103 135 163 189 199 203 221 243 247 273 297 305 309 351 371 377 397 405 421 455 459 489 513 515 551 559 567 597 609 621 637 663 675 721 729 741 757 779 783 815 819 837 883 891 915 927 945])

;; (some #(= 0 %) (trib_cycle_mod_m 27))

;; (if nil
;;   nil
;;   false)

;; ( count (conj [] 27))

;; (= false nil)


;; (defn tribonaccis_mod_m [n-th, m]
;;   "Find the n-th term of the tribonacci sequence when n-th > 3
;;   m is the modulus"
;;   (loop [current_iteration 0
;;          tribs [1 1 1]]
;;     (if-not (> current_iteration n-th)
;;       (recur (inc current_iteration)
;;               (#(conj %
;;                       (mod (reduce + (take-last 3 %)) m))
;;                 tribs))
;;       tribs)))









;; (defn tribonacci_non_divisors []
;;   (loop [current_iteration 0
;;          tribs [1 1 1]]
;;     (if-not (> current_iteration n-th)
;;       (recur (inc current_iteration)
;;               (#(conj %
;;                       (reduce +' (take-last 3 %)))
;;                 tribs))
;;       tribs)))

;; (defn tribonaccis [n-th]
;;   (loop [current_iteration 0
;;          tribs [1 1 1]]
;;     (if-not (> current_iteration n-th)
;;       (recur (inc current_iteration)
;;               (#(conj %
;;                       (reduce +' (take-last 3 %)))
;;                 tribs))
;;       tribs)))

;; (mod 1 27)
;; (map #(mod % 27) (tribonaccis 100))

;; ;; (1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24N 19N 19N 8N 19N 19N 19N 3N 14N 9N 26N 22N 3N 24N 22N 22N 14N 4N 13N 4N 21N 11N 9N 14N 7N 3N 24N 7N 7N 11N)

;; (tribonaccis_mod_m 1001 27)


;; ;; [1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12]
;; (reduce + (take-last 3 '(1 2 3 4)))

;; (dotimes [n 10] (println (map #(* % (inc n)) (range 1 11))))

;; (+ -2 -2 -3)


;; (count '(1 1 1 3 5 9 17 4 3 24 4 4 5 13 22 13 21 2 9 5 16 3 24 16 16 2 7 25 7 12 17 9 11 10 3 24 10 10 17 10 10 10 3 23 9 8 13 3 24 13 13 23 22 4 22 21 20 9 23 25 3 24 25 25 20 16 7 16 12 8 9 2 19 3 24 19 19 8 19 19 19 3 14 9 26 22 3 24 22 22 14 4 13 4 21 11 9 14 7 3 24 7 7 11 25 16 25 12 26 9 20 1 3 24 1 1 26 1 1 1))
